/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.inditex.prices.api.rest.api;

import org.springframework.format.annotation.DateTimeFormat;
import com.inditex.prices.api.rest.dto.ErrorDto;
import java.time.OffsetDateTime;
import com.inditex.prices.api.rest.dto.PriceDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-24T15:57:29.784284500+01:00[Europe/Paris]")
@Validated
@Tag(name = "Prices", description = "the Prices API")
public interface PricesApi {

    /**
     * GET /v1/prices : Returns the price to be applied in the given date for the incoming product and brand
     *
     * @param applyDate Date in which price must be applied (required)
     * @param productId Product id that is requesting the price to apply (required)
     * @param brandId Brand id of the product (required)
     * @return Request Accepted (status code 200)
     *         or Bad Request (status code 400)
     *         or Non Processable Entity (status code 422)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getPriceByDateAndProductAndBrand",
        summary = "Returns the price to be applied in the given date for the incoming product and brand",
        tags = { "prices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Request Accepted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "422", description = "Non Processable Entity", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/prices",
        produces = { "application/json" }
    )
    ResponseEntity<PriceDto> getPriceByDateAndProductAndBrand(
        @NotNull @Parameter(name = "apply_date", description = "Date in which price must be applied", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "apply_date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) java.time.LocalDateTime applyDate,
        @NotNull @Parameter(name = "product_id", description = "Product id that is requesting the price to apply", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "product_id", required = true) Long productId,
        @NotNull @Parameter(name = "brand_id", description = "Brand id of the product", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "brand_id", required = true) Long brandId
    );

}
